{"version":3,"sources":["logo.svg","Clock.js","Toggle.js","NavBar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Component","React","Welcome","props","react_default","a","createElement","name","App","className","src","logo","alt","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,kTCGpBC,kBCDCC,IAAMD,sBCCSA,YCoBpC,SAASE,EAAQC,GACf,OAAOC,EAAAC,EAAAC,cAAA,wBAAgBH,EAAMI,UA0ChBC,mLArCX,OACEJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OAGbL,EAAAC,EAAAC,cAAA,UAAQG,UAAU,cAChBL,EAAAC,EAAAC,cAAA,OAAKI,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACvCR,EAAAC,EAAAC,cAACJ,EAAD,CAASK,KAAK,SAEdH,EAAAC,EAAAC,cAAA,qCACAF,EAAAC,EAAAC,cAAA,MAAIG,UAAU,6BAAd,sDAGJL,EAAAC,EAAAC,cAAA,UAAQG,UAAU,cAClBL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,UAAf,8BAEEL,EAAAC,EAAAC,cAAA,KACEG,UAAU,WACVI,KAAK,mFACLC,OAAO,SACPC,IAAI,uBAJN,qBASAX,EAAAC,EAAAC,cAAA,UAAQG,UAAU,cAClBL,EAAAC,EAAAC,cAAA,2BACiBF,EAAAC,EAAAC,cAAA,KAAGG,UAAU,WACnBI,KAAK,kCACLE,IAAI,uBAFE,sCA5BTf,aCfEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACTlB,EAAAC,EAAAC,cAACiB,EAAD,MAASC,SAASC,eAAe,SD0H3B,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5a8d1103.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport \"./Clock.css\"\n\nclass Clock extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {date: new Date()};\n    }\n\n    componentDidMount() {\n        this.timerID = setInterval(\n            () => this.tick(),\n            1000\n          );      \n    }\n  \n    componentWillUnmount() {\n        clearInterval(this.timerID);\n    }\n\n    tick() {\n        this.setState({\n            date: new Date()\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"Clock\">\n            <h1>Don't be late, here's a clock for you!</h1>\n            <h2>It is {this.state.date.toLocaleTimeString()}.</h2>\n            </div>\n        );\n    }\n}\n\nexport default Clock;","import React, { Component } from 'react';\n\nclass Toggle extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {isToggleOn: true};\n  \n      // This binding is necessary to make `this` work in the callback\n      this.handleClick = this.handleClick.bind(this);\n    }\n\n    handleClick = () => {\n        this.setState(state => ({\n            isToggleOn: !state.isToggleOn}));    \n      }\n  \n    render() {\n      return (\n        <button onClick={this.handleClick}>\n          {this.state.isToggleOn ? 'I\\'m your Toggle! I\\'m ON!' : 'You shut me OFF :('}\n        </button>\n      );\n    }\n  }\n\n  export default Toggle;","import React, { Component } from 'react';\nimport \"./NavBar.css\"\n\nexport default class NavBar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {date: new Date()};\n    }\n\n    componentDidMount() {\n        this.timerID = setInterval(\n            () => this.tick(),\n            1000\n          );      \n    }\n  \n    componentWillUnmount() {\n        clearInterval(this.timerID);\n    }\n\n    tick() {\n        this.setState({\n            date: new Date()\n        });\n    }\n\n    render() {\n        return (\n            <div class='NavBar'>\n                <div class='row'>\n                    <div class='column'>\n                        <div class='column'>\n                            ABOUT\n                        </div>\n                    </div>\n                    <div class='column'>\n                        <div class='column'>\n                            WORK\n                        </div>\n                    </div>\n                    <div class='column'>\n                        <div class='column'>\n                            BLOG\n                        </div>\n                    </div>\n                    <div class='column'>\n                        <div class='column'>\n                            CONTACT\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Clock from './Clock.js';\nimport Toggle from './Toggle';\nimport header from './header';\nimport NavBar from './NavBar';\n\nconst user = {\n  firstName: 'Luca',\n  lastName: 'Cesarano',\n};\n\nfunction formatName(user) {\n  return user.firstName + ' ' + user.lastName;\n}\n\nfunction getGreeting(user) {\n  if(user) {\n    return <h1>HELLO, {formatName(user)}!</h1>;\n  } else return <h1>HELLO, STRANGER!</h1>;\n}\n\nfunction Welcome(props) {\n  return <h1>HELLO, I'M {props.name}</h1>;\n}\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n      {/*<NavBar />*/}\n            {/*<Clock />*/}\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <Welcome name=\"LUCA\" ></Welcome>\n            {/*<Toggle />*/}\n            <h2>I'M A COMPUTER ENGINEER</h2>\n            <h5 className=\"App-animation-color-cycle\"> REACT IS HELPING ME TO BUILD THIS WEBSITE ‚ù§</h5>\n        </header>\n\n        <middle className=\"App-middle\">\n        <div className=\"InLine\">\n        FOR ADDITIONAL INFORMATION:\n          <a\n            className=\"App-link\"\n            href=\"https://docs.google.com/document/d/177EnbipKrSDezdCW10ok0LZR79PuPTtBrqViSfJT_ZU/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"> HERE IS MY CV.\n          </a>\n\n        </div>\n          </middle>\n          <footer className=\"App-footer\">\n          <p>\n            REACH ME OUT @ <a className=\"App-link\"\n                     href=\"mailto:luca.cesarano1@gmail.com\"\n                     rel=\"noopener noreferrer\">\n                     LUCA.CESARANO1@GMAIL.COM</a>\n          </p>\n          </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n  \nReactDOM.render(\n<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}