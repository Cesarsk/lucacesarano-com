{"ast":null,"code":"import _classCallCheck from \"/Users/cesarsk/Projects/Web Design/NodeJS/es4-my-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/cesarsk/Projects/Web Design/NodeJS/es4-my-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/cesarsk/Projects/Web Design/NodeJS/es4-my-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/cesarsk/Projects/Web Design/NodeJS/es4-my-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/cesarsk/Projects/Web Design/NodeJS/es4-my-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/cesarsk/Projects/Web Design/NodeJS/es4-my-app/src/Sandbox.js\";\nimport React, { Component } from 'react'; //REAL USE CASE:\n//You need to call a GET REQUEST for some reason which requires time and you can't afford to block the execution of the program.\n//A callback gets called only after the flow of the first func ends; so that, in our case, ONLY AFTER the GET REQUEST ends, whether it's successful or not,\n//the second function gets executed, possibly to handle that data.\n//Note: this avoids polling (to passively check on a desired condition) or threading your code\n\nvar Sandbox =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Sandbox, _Component);\n\n  function Sandbox() {\n    _classCallCheck(this, Sandbox);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Sandbox).apply(this, arguments));\n  }\n\n  _createClass(Sandbox, [{\n    key: \"render\",\n    value: function render() {\n      //The function alertFinished is our second param.\n      doJob('ISS', alertFinished);\n      alert(\"[main] This proves the main execution is still going\");\n      return React.createElement(\"h\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Sandbox;\n}(Component);\n\nfunction doJob(name, callback) {\n  //First function to get called\n  alert(\"[doJob] Starting my \".concat(name, \" Job.\"));\n  setTimeout(function () {\n    callback();\n  }, 2000);\n} //This func gets executed ONLY AFTER the execution of the first function ends.\n\n\nfunction alertFinished() {\n  alert('[alertFinished] Finished my job');\n}\n\nexport default Sandbox;","map":{"version":3,"sources":["/Users/cesarsk/Projects/Web Design/NodeJS/es4-my-app/src/Sandbox.js"],"names":["React","Component","Sandbox","doJob","alertFinished","alert","name","callback","setTimeout"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CAEA;AACA;AACA;AACA;AACA;;IAEMC,O;;;;;;;;;;;;;6BACO;AACL;AACAC,MAAAA,KAAK,CAAC,KAAD,EAAQC,aAAR,CAAL;AACAC,MAAAA,KAAK,wDAAL;AACA,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAGH;;;;EARiBJ,S;;AAWtB,SAASE,KAAT,CAAeG,IAAf,EAAqBC,QAArB,EAA+B;AAE3B;AACAF,EAAAA,KAAK,+BAAwBC,IAAxB,WAAL;AACAE,EAAAA,UAAU,CAAC,YAAM;AACbD,IAAAA,QAAQ;AACX,GAFS,EAEP,IAFO,CAAV;AAGH,C,CAED;;;AACA,SAASH,aAAT,GAAyB;AACrBC,EAAAA,KAAK,CAAC,iCAAD,CAAL;AACH;;AAED,eAAeH,OAAf","sourcesContent":["import React, { Component } from 'react';\n\n//REAL USE CASE:\n//You need to call a GET REQUEST for some reason which requires time and you can't afford to block the execution of the program.\n//A callback gets called only after the flow of the first func ends; so that, in our case, ONLY AFTER the GET REQUEST ends, whether it's successful or not,\n//the second function gets executed, possibly to handle that data.\n//Note: this avoids polling (to passively check on a desired condition) or threading your code\n\nclass Sandbox extends Component {\n    render() {\n        //The function alertFinished is our second param.\n        doJob('ISS', alertFinished);\n        alert(`[main] This proves the main execution is still going`);\n        return(\n            <h></h>\n        );\n    }\n}\n\nfunction doJob(name, callback) {\n    \n    //First function to get called\n    alert(`[doJob] Starting my ${name} Job.`);\n    setTimeout(() => {\n        callback();\n    }, 2000);\n}\n\n//This func gets executed ONLY AFTER the execution of the first function ends.\nfunction alertFinished() {\n    alert('[alertFinished] Finished my job');\n}\n\nexport default Sandbox;"]},"metadata":{},"sourceType":"module"}